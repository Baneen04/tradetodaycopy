"""
Django settings for Trading project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv(override = True)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ["192.168.1.20", "localhost", "127.0.0.1"]
ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'daphne',  # Required for ASGI/WebSockets
    'channels',
    'crypticron_trade',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'accounts',
    'django_celery_beat',
    # 'django.contrib.contenttypes',  # This is required for MongoDB
    # 'django_mongoengine',
    # 'mongoengine.django.mongo_auth', 
]
# AUTH_USER_MODEL = 'accounts.CustomUser'
# settings.py

# AUTH_USER_MODEL = 'accounts.CustomUser'

ASGI_APPLICATION = "Trading.asgi.application"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Trading.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Ensure Django looks for templates in the 'templates' folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Trading.wsgi.application'

# settings.py



# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {}

# DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
# ######## MYSQL
#      'default': {
#         'ENGINE': 'mysql.connector.django',
#         # 'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.getenv("db_name"),
#         'USER': os.getenv("db_user"),
#         'PASSWORD': os.getenv("db_password"),
#         'HOST': os.getenv("db_host"),
#         'PORT': os.getenv("db_port"),
#     }

    # ##### MANGODB
    #     'default': {
    #     'ENGINE': 'djongo',
    #     'NAME': 'Crypticorn',  # Replace with your database name
    #     'ENFORCE_SCHEMA': False,
    #     'CLIENT': {
    #         'host': 'mongodb://localhost:27017/tradetoday',  # Replace with your MongoDB connection string
    #     }
    # }
# }

# from mongoengine import connect

# connect('Crypticorn', host='mongodb://localhost:27017/')
# DATABASES= {
#     'default' :{
#     'ENGINE': 'django_mongoengine',
#     'NAME': 'crypticron_db',  # Your MongoDB database name
#     'HOST': 'mongodb://localhost:27017',  # Update with your MongoDB URI if different
# }}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#CORS
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)
#JWT TOKEN
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'accounts.authentication.MongoJWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

from datetime import timedelta
from rest_framework_simplejwt import settings as jwt_settings

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=2),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('accounts.tokens.MongoAccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

##KEYS
API_KEY = os.getenv("API_KEY")
B_SECRET_KEY = os.getenv("B_SECRET_KEY")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")


#REDDIT KEY
REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_CLIENT_SECRET = os.getenv("REDDIT_CLIENT_SECRET")
REDDIT_USER_AGENT = os.getenv("REDDIT_USER_AGENT")
COIN_MARKET_KEY = os.getenv("COIN_MARKET_KEY")


FRONTEND_URL= "http://localhost:8000"
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET= os.getenv("STRIPE_WEBHOOK_SECRET")

#For image saving
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
###CELERY
CELERY_BROKER_URL =os.getenv('CELERY_BROKER_URL')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# CELERY_BEAT_SCHEDULER = 'crypticron_trade.scheduler.MongoScheduler' 


##
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}


AUTHENTICATION_BACKENDS = [
    'accounts.authentication.MongoUserBackend',  # Custom MongoDB authentication backend
    'accounts.authentication.EmailAuthenticationBackend',  # Custom email-based authentication
]

# Add MongoEngine settings
# MONGODB_DATABASES = {
#     'default': {
#         'name': 'tradetoday',
#         'host': 'localhost',
#         'port': 27017,
#     }
# }


from mongoengine import connect
connect(
    db='trade_today',
    host='localhost',
    port=27017,
    # alias='default'  # Ensure this alias is used for the connection
)
# connect('your_db_name', host='mongodb://localhost/your_db_name')  # Adjust this according to your MongoDB configuration
